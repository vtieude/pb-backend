package entities

// Code generated by xo. DO NOT EDIT.

import (
	"context"

	"github.com/elgris/sqrl"
)

// Role represents a row from 'role'.
type Role struct {
	ID       int    `json:"id"`        // id
	RoleName string `json:"role_name"` // role_name
	Label    string `json:"label"`     // label
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the Role exists in the database.
func (r *Role) Exists() bool {
	return r._exists
}

// Deleted returns true when the Role has been marked for deletion from
// the database.
func (r *Role) Deleted() bool {
	return r._deleted
}

// Insert inserts the Role to the database.
func (r *Role) Insert(ctx context.Context, db DB) error {
	switch {
	case r._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case r._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO role (` +
		`role_name, label` +
		`) VALUES (` +
		`?, ?` +
		`)`
	// run
	logf(sqlstr, r.RoleName, r.Label)
	res, err := db.ExecContext(ctx, sqlstr, r.RoleName, r.Label)
	if err != nil {
		return logerror(err)
	}
	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return logerror(err)
	} // set primary key
	r.ID = int(id)
	// set exists
	r._exists = true
	return nil
}

// Update updates a Role in the database.
func (r *Role) Update(ctx context.Context, db DB) error {
	switch {
	case !r._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case r._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE role SET ` +
		`role_name = ?, label = ? ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, r.RoleName, r.Label, r.ID)
	if _, err := db.ExecContext(ctx, sqlstr, r.RoleName, r.Label, r.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the Role to the database.
func (r *Role) Save(ctx context.Context, db DB) error {
	if r.Exists() {
		return r.Update(ctx, db)
	}
	return r.Insert(ctx, db)
}

// Upsert performs an upsert for Role.
func (r *Role) Upsert(ctx context.Context, db DB) error {
	switch {
	case r._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO role (` +
		`id, role_name, label` +
		`) VALUES (` +
		`?, ?, ?` +
		`)` +
		` ON DUPLICATE KEY UPDATE ` +
		`role_name = VALUES(role_name), label = VALUES(label)`
	// run
	logf(sqlstr, r.ID, r.RoleName, r.Label)
	if _, err := db.ExecContext(ctx, sqlstr, r.ID, r.RoleName, r.Label); err != nil {
		return logerror(err)
	}
	// set exists
	r._exists = true
	return nil
}

// Delete deletes the Role from the database.
func (r *Role) Delete(ctx context.Context, db DB) error {
	switch {
	case !r._exists: // doesn't exist
		return nil
	case r._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM role ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, r.ID)
	if _, err := db.ExecContext(ctx, sqlstr, r.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	r._deleted = true
	return nil
}

// RoleByID retrieves a row from 'role' as a Role.
//
// Generated from index 'role_id_pkey'.
func RoleByID(ctx context.Context, db DB, id int) (*Role, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, role_name, label ` +
		`FROM role ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, id)
	r := Role{
		_exists: true,
	}
	qb := sqrl.Expr(sqlstr, id)
	if err := db.QueryRowContext(ctx, &r, qb); err != nil {
		return nil, logerror(err)
	}
	return &r, nil
}
