package entities

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"time"

	"github.com/elgris/sqrl"
)

// ProductCheckPoint represents a row from 'product_check_point'.
type ProductCheckPoint struct {
	ID        int           `json:"ID" db:"id"`                // id
	FkProduct int           `json:"FkProduct" db:"fk_product"` // fk_product
	FkSale    sql.NullInt64 `json:"FkSale" db:"fk_sale"`       // fk_sale
	Type      NullType      `json:"Type" db:"type"`            // type
	UpdatedAt time.Time     `json:"UpdatedAt" db:"updated_at"` // updated_at
	CreatedAt time.Time     `json:"CreatedAt" db:"created_at"` // created_at
	Active    bool          `json:"Active" db:"active"`        // active
	// xo fields
	_exists, _deleted bool
}

type FilterProductCheckPoint struct {
	ID        *int           // id
	FkProduct *int           // fk_product
	FkSale    *sql.NullInt64 // fk_sale
	Type      *NullType      // type
	UpdatedAt *time.Time     // updated_at
	CreatedAt *time.Time     // created_at
	Active    *bool          // active

}

// Apply filter to sqrl ProductCheckPoint .
func (pcp *ProductCheckPoint) ApplyFilterSale(sqrlBuilder *sqrl.SelectBuilder, filter FilterProductCheckPoint) bool {
	if filter.ID != nil {
		sqrlBuilder.Where(sqrl.Eq{"id": filter.ID})
	}
	if filter.FkProduct != nil {
		sqrlBuilder.Where(sqrl.Eq{"fk_product": filter.FkProduct})
	}
	if filter.FkSale != nil {
		sqrlBuilder.Where(sqrl.Eq{"fk_sale": filter.FkSale})
	}
	if filter.Type != nil {
		sqrlBuilder.Where(sqrl.Eq{"type": filter.Type})
	}
	if filter.UpdatedAt != nil {
		sqrlBuilder.Where(sqrl.Eq{"updated_at": filter.UpdatedAt})
	}
	if filter.CreatedAt != nil {
		sqrlBuilder.Where(sqrl.Eq{"created_at": filter.CreatedAt})
	}
	if filter.Active != nil {
		sqrlBuilder.Where(sqrl.Eq{"active": filter.Active})
	}

	return true
}

// Exists returns true when the ProductCheckPoint exists in the database.
func (pcp *ProductCheckPoint) Exists() bool {
	return pcp._exists
}

// Deleted returns true when the ProductCheckPoint has been marked for deletion from
// the database.
func (pcp *ProductCheckPoint) Deleted() bool {
	return pcp._deleted
}

// Insert inserts the ProductCheckPoint to the database.
func (pcp *ProductCheckPoint) Insert(ctx context.Context, db DB) error {
	switch {
	case pcp._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case pcp._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	pcp.UpdatedAt = time.Now()
	pcp.CreatedAt = time.Now()
	pcp.Active = true
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO product_check_point (` +
		`fk_product, fk_sale, type, updated_at, created_at, active` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?` +
		`)`
	// run
	logf(sqlstr, pcp.FkProduct, pcp.FkSale, pcp.Type, pcp.UpdatedAt, pcp.CreatedAt, pcp.Active)
	res, err := db.ExecContext(ctx, sqlstr, pcp.FkProduct, pcp.FkSale, pcp.Type, pcp.UpdatedAt, pcp.CreatedAt, pcp.Active)
	if err != nil {
		return logerror(err)
	}
	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return logerror(err)
	} // set primary key
	pcp.ID = int(id)
	// set exists
	pcp._exists = true
	return nil
}

// Update updates a ProductCheckPoint in the database.
func (pcp *ProductCheckPoint) Update(ctx context.Context, db DB) error {
	switch {
	case !pcp._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case pcp._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	pcp.UpdatedAt = time.Now()
	// update with primary key
	const sqlstr = `UPDATE product_check_point SET ` +
		`fk_product = ?, fk_sale = ?, type = ?, updated_at = ?, created_at = ?, active = ? ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, pcp.FkProduct, pcp.FkSale, pcp.Type, pcp.UpdatedAt, pcp.CreatedAt, pcp.Active, pcp.ID)
	if _, err := db.ExecContext(ctx, sqlstr, pcp.FkProduct, pcp.FkSale, pcp.Type, pcp.UpdatedAt, pcp.CreatedAt, pcp.Active, pcp.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the ProductCheckPoint to the database.
func (pcp *ProductCheckPoint) Save(ctx context.Context, db DB) error {
	if pcp.Exists() {
		return pcp.Update(ctx, db)
	}
	return pcp.Insert(ctx, db)
}

// Upsert performs an upsert for ProductCheckPoint.
func (pcp *ProductCheckPoint) Upsert(ctx context.Context, db DB) error {
	switch {
	case pcp._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO product_check_point (` +
		`id, fk_product, fk_sale, type, updated_at, created_at, active` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?` +
		`)` +
		` ON DUPLICATE KEY UPDATE ` +
		`fk_product = VALUES(fk_product), fk_sale = VALUES(fk_sale), type = VALUES(type), updated_at = VALUES(updated_at), created_at = VALUES(created_at), active = VALUES(active)`
	// run
	logf(sqlstr, pcp.ID, pcp.FkProduct, pcp.FkSale, pcp.Type, pcp.UpdatedAt, pcp.CreatedAt, pcp.Active)
	if _, err := db.ExecContext(ctx, sqlstr, pcp.ID, pcp.FkProduct, pcp.FkSale, pcp.Type, pcp.UpdatedAt, pcp.CreatedAt, pcp.Active); err != nil {
		return logerror(err)
	}
	// set exists
	pcp._exists = true
	return nil
}

// Delete deletes the ProductCheckPoint from the database.
func (pcp *ProductCheckPoint) Delete(ctx context.Context, db DB) error {
	switch {
	case !pcp._exists: // doesn't exist
		return nil
	case pcp._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `UPDATE product_check_point SET active = false, updated_at = ? WHERE id = ?`
	// run
	logf(sqlstr, pcp.ID)
	if _, err := db.ExecContext(ctx, sqlstr, time.Now(), pcp.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	pcp._deleted = true
	return nil
}

// ProductCheckPointByFkProduct retrieves a row from 'product_check_point' as a ProductCheckPoint.
//
// Generated from index 'fk_product'.
func ProductCheckPointByFkProduct(ctx context.Context, db DB, fkProduct int) ([]*ProductCheckPoint, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, fk_product, fk_sale, type, updated_at, created_at, active ` +
		`FROM product_check_point ` +
		`WHERE fk_product = ?`
	// run
	logf(sqlstr, fkProduct)
	// process
	var res []*ProductCheckPoint
	qb := sqrl.Expr(sqlstr, fkProduct)
	if err := db.QueryContext(ctx, &res, qb); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// ProductCheckPointByFkSale retrieves a row from 'product_check_point' as a ProductCheckPoint.
//
// Generated from index 'fk_sale'.
func ProductCheckPointByFkSale(ctx context.Context, db DB, fkSale sql.NullInt64) ([]*ProductCheckPoint, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, fk_product, fk_sale, type, updated_at, created_at, active ` +
		`FROM product_check_point ` +
		`WHERE fk_sale = ?`
	// run
	logf(sqlstr, fkSale)
	// process
	var res []*ProductCheckPoint
	qb := sqrl.Expr(sqlstr, fkSale)
	if err := db.QueryContext(ctx, &res, qb); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// ProductCheckPointByID retrieves a row from 'product_check_point' as a ProductCheckPoint.
//
// Generated from index 'product_check_point_id_pkey'.
func ProductCheckPointByID(ctx context.Context, db DB, id int) (*ProductCheckPoint, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, fk_product, fk_sale, type, updated_at, created_at, active ` +
		`FROM product_check_point ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, id)
	pcp := ProductCheckPoint{
		_exists: true,
	}
	qb := sqrl.Expr(sqlstr, id)
	if err := db.QueryRowContext(ctx, &pcp, qb); err != nil {
		return nil, logerror(err)
	}
	return &pcp, nil
}

// Product returns the Product associated with the ProductCheckPoint's (FkProduct).
//
// Generated from foreign key 'product_check_point_ibfk_1'.
func (pcp *ProductCheckPoint) Product(ctx context.Context, db DB) (*Product, error) {
	return ProductByID(ctx, db, pcp.FkProduct)
}

// Sale returns the Sale associated with the ProductCheckPoint's (FkSale).
//
// Generated from foreign key 'product_check_point_ibfk_2'.
func (pcp *ProductCheckPoint) Sale(ctx context.Context, db DB) (*Sale, error) {
	return SaleByID(ctx, db, int(pcp.FkSale.Int64))
}
