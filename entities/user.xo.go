package entities

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"

	"github.com/elgris/sqrl"
)

// User represents a row from 'user'.
type User struct {
	ID          int            `json:"ID" db:"id"`                    // id
	Username    string         `json:"Username" db:"username"`        // username
	Password    string         `json:"Password" db:"password"`        // password
	Email       string         `json:"Email" db:"email"`              // email
	RoleLabel   string         `json:"RoleLabel" db:"role_label"`     // role_label
	Permission  int            `json:"Permission" db:"permission"`    // permission
	Role        string         `json:"Role" db:"role"`                // role
	Active      bool           `json:"Active" db:"active"`            // active
	PhoneNumber sql.NullString `json:"PhoneNumber" db:"phone_number"` // phone_number
	// xo fields
	_exists, _deleted bool
}

type FilterUser struct {
	ID          *int            // id
	Username    *string         // username
	Password    *string         // password
	Email       *string         // email
	RoleLabel   *string         // role_label
	Permission  *int            // permission
	Role        *string         // role
	Active      *bool           // active
	PhoneNumber *sql.NullString // phone_number

}

// Apply filter to sqrl User .
func (u *User) ApplyFilterSale(sqrlBuilder *sqrl.SelectBuilder, filter FilterUser) bool {
	if filter.ID != nil {
		sqrlBuilder.Where(sqrl.Eq{"id": filter.ID})
	}
	if filter.Username != nil {
		sqrlBuilder.Where(sqrl.Eq{"username": filter.Username})
	}
	if filter.Password != nil {
		sqrlBuilder.Where(sqrl.Eq{"password": filter.Password})
	}
	if filter.Email != nil {
		sqrlBuilder.Where(sqrl.Eq{"email": filter.Email})
	}
	if filter.RoleLabel != nil {
		sqrlBuilder.Where(sqrl.Eq{"role_label": filter.RoleLabel})
	}
	if filter.Permission != nil {
		sqrlBuilder.Where(sqrl.Eq{"permission": filter.Permission})
	}
	if filter.Role != nil {
		sqrlBuilder.Where(sqrl.Eq{"role": filter.Role})
	}
	if filter.Active != nil {
		sqrlBuilder.Where(sqrl.Eq{"active": filter.Active})
	}
	if filter.PhoneNumber != nil {
		sqrlBuilder.Where(sqrl.Eq{"phone_number": filter.PhoneNumber})
	}

	return true
}

// Exists returns true when the User exists in the database.
func (u *User) Exists() bool {
	return u._exists
}

// Deleted returns true when the User has been marked for deletion from
// the database.
func (u *User) Deleted() bool {
	return u._deleted
}

// Insert inserts the User to the database.
func (u *User) Insert(ctx context.Context, db DB) error {
	switch {
	case u._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case u._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO user (` +
		`username, password, email, role_label, permission, role, active, phone_number` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?` +
		`)`
	// run
	logf(sqlstr, u.Username, u.Password, u.Email, u.RoleLabel, u.Permission, u.Role, u.Active, u.PhoneNumber)
	res, err := db.ExecContext(ctx, sqlstr, u.Username, u.Password, u.Email, u.RoleLabel, u.Permission, u.Role, u.Active, u.PhoneNumber)
	if err != nil {
		return logerror(err)
	}
	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return logerror(err)
	} // set primary key
	u.ID = int(id)
	// set exists
	u._exists = true
	return nil
}

// Update updates a User in the database.
func (u *User) Update(ctx context.Context, db DB) error {
	switch {
	case !u._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case u._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE user SET ` +
		`username = ?, password = ?, email = ?, role_label = ?, permission = ?, role = ?, active = ?, phone_number = ? ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, u.Username, u.Password, u.Email, u.RoleLabel, u.Permission, u.Role, u.Active, u.PhoneNumber, u.ID)
	if _, err := db.ExecContext(ctx, sqlstr, u.Username, u.Password, u.Email, u.RoleLabel, u.Permission, u.Role, u.Active, u.PhoneNumber, u.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the User to the database.
func (u *User) Save(ctx context.Context, db DB) error {
	if u.Exists() {
		return u.Update(ctx, db)
	}
	return u.Insert(ctx, db)
}

// Upsert performs an upsert for User.
func (u *User) Upsert(ctx context.Context, db DB) error {
	switch {
	case u._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO user (` +
		`id, username, password, email, role_label, permission, role, active, phone_number` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)` +
		` ON DUPLICATE KEY UPDATE ` +
		`username = VALUES(username), password = VALUES(password), email = VALUES(email), role_label = VALUES(role_label), permission = VALUES(permission), role = VALUES(role), active = VALUES(active), phone_number = VALUES(phone_number)`
	// run
	logf(sqlstr, u.ID, u.Username, u.Password, u.Email, u.RoleLabel, u.Permission, u.Role, u.Active, u.PhoneNumber)
	if _, err := db.ExecContext(ctx, sqlstr, u.ID, u.Username, u.Password, u.Email, u.RoleLabel, u.Permission, u.Role, u.Active, u.PhoneNumber); err != nil {
		return logerror(err)
	}
	// set exists
	u._exists = true
	return nil
}

// Delete deletes the User from the database.
func (u *User) Delete(ctx context.Context, db DB) error {
	switch {
	case !u._exists: // doesn't exist
		return nil
	case u._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM user ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, u.ID)
	if _, err := db.ExecContext(ctx, sqlstr, u.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	u._deleted = true
	return nil
}

// UserByEmail retrieves a row from 'user' as a User.
//
// Generated from index 'email'.
func UserByEmail(ctx context.Context, db DB, email string) (*User, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, username, password, email, role_label, permission, role, active, phone_number ` +
		`FROM user ` +
		`WHERE email = ?`
	// run
	logf(sqlstr, email)
	u := User{
		_exists: true,
	}
	qb := sqrl.Expr(sqlstr, email)
	if err := db.QueryRowContext(ctx, &u, qb); err != nil {
		return nil, logerror(err)
	}
	return &u, nil
}

// UserByID retrieves a row from 'user' as a User.
//
// Generated from index 'user_id_pkey'.
func UserByID(ctx context.Context, db DB, id int) (*User, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, username, password, email, role_label, permission, role, active, phone_number ` +
		`FROM user ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, id)
	u := User{
		_exists: true,
	}
	qb := sqrl.Expr(sqlstr, id)
	if err := db.QueryRowContext(ctx, &u, qb); err != nil {
		return nil, logerror(err)
	}
	return &u, nil
}
