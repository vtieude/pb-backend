package entities

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql/driver"
	"fmt"
)

// Type is the 'type' enum type from schema 'app_db'.
type Type uint16

// Type values.
const (
	// TypeSaled is the 'saled' type.
	TypeSaled Type = 1
	// TypeAdded is the 'added' type.
	TypeAdded Type = 2
)

// String satisfies the fmt.Stringer interface.
func (t Type) String() string {
	switch t {
	case TypeSaled:
		return "saled"
	case TypeAdded:
		return "added"
	}
	return fmt.Sprintf("Type(%d)", t)
}

// MarshalText marshals Type into text.
func (t Type) MarshalText() ([]byte, error) {
	return []byte(t.String()), nil
}

// UnmarshalText unmarshals Type from text.
func (t *Type) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "saled":
		*t = TypeSaled
	case "added":
		*t = TypeAdded
	default:
		return ErrInvalidType(str)
	}
	return nil
}

// Value satisfies the driver.Valuer interface.
func (t Type) Value() (driver.Value, error) {
	return t.String(), nil
}

// Scan satisfies the sql.Scanner interface.
func (t *Type) Scan(v interface{}) error {
	if buf, ok := v.([]byte); ok {
		return t.UnmarshalText(buf)
	}
	return ErrInvalidType(fmt.Sprintf("%T", v))
}

// NullType represents a null 'type' enum for schema 'app_db'.
type NullType struct {
	Type Type
	// Valid is true if Type is not null.
	Valid bool
}

// Value satisfies the driver.Valuer interface.
func (nt NullType) Value() (driver.Value, error) {
	if !nt.Valid {
		return nil, nil
	}
	return nt.Type.Value()
}

// Scan satisfies the sql.Scanner interface.
func (nt *NullType) Scan(v interface{}) error {
	if v == nil {
		nt.Type, nt.Valid = 0, false
		return nil
	}
	err := nt.Type.Scan(v)
	nt.Valid = err == nil
	return err
}

// ErrInvalidType is the invalid Type error.
type ErrInvalidType string

// Error satisfies the error interface.
func (err ErrInvalidType) Error() string {
	return fmt.Sprintf("invalid Type(%s)", string(err))
}
