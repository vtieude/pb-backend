package entities

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"time"

	"github.com/elgris/sqrl"
)

// Product represents a row from 'product'.
type Product struct {
	ID           int            `json:"ID" db:"id"`                      // id
	Name         string         `json:"Name" db:"name"`                  // name
	ProductKey   string         `json:"ProductKey" db:"product_key"`     // product_key
	UpdatedAt    time.Time      `json:"UpdatedAt" db:"updated_at"`       // updated_at
	CreatedAt    time.Time      `json:"CreatedAt" db:"created_at"`       // created_at
	Active       bool           `json:"Active" db:"active"`              // active
	Price        float64        `json:"Price" db:"price"`                // price
	Category     sql.NullString `json:"Category" db:"category"`          // category
	SellingPrice float64        `json:"SellingPrice" db:"selling_price"` // selling_price
	Quantity     int            `json:"Quantity" db:"quantity"`          // quantity
	Description  sql.NullString `json:"Description" db:"description"`    // description
	ImagePrefix  sql.NullString `json:"ImagePrefix" db:"image_prefix"`   // image_prefix
	ImageBase64  []byte         `json:"ImageBase64" db:"image_base64"`   // image_base64
	// xo fields
	_exists, _deleted bool
}

type FilterProduct struct {
	ID           *int            // id
	Name         *string         // name
	ProductKey   *string         // product_key
	UpdatedAt    *time.Time      // updated_at
	CreatedAt    *time.Time      // created_at
	Active       *bool           // active
	Price        *float64        // price
	Category     *sql.NullString // category
	SellingPrice *float64        // selling_price
	Quantity     *int            // quantity
	Description  *sql.NullString // description
	ImagePrefix  *sql.NullString // image_prefix
	ImageBase64  *[]byte         // image_base64

}

// Apply filter to sqrl Product .
func (p *Product) ApplyFilterSale(sqrlBuilder *sqrl.SelectBuilder, filter FilterProduct) bool {
	if filter.ID != nil {
		sqrlBuilder.Where(sqrl.Eq{"id": filter.ID})
	}
	if filter.Name != nil {
		sqrlBuilder.Where(sqrl.Eq{"name": filter.Name})
	}
	if filter.ProductKey != nil {
		sqrlBuilder.Where(sqrl.Eq{"product_key": filter.ProductKey})
	}
	if filter.UpdatedAt != nil {
		sqrlBuilder.Where(sqrl.Eq{"updated_at": filter.UpdatedAt})
	}
	if filter.CreatedAt != nil {
		sqrlBuilder.Where(sqrl.Eq{"created_at": filter.CreatedAt})
	}
	if filter.Active != nil {
		sqrlBuilder.Where(sqrl.Eq{"active": filter.Active})
	}
	if filter.Price != nil {
		sqrlBuilder.Where(sqrl.Eq{"price": filter.Price})
	}
	if filter.Category != nil {
		sqrlBuilder.Where(sqrl.Eq{"category": filter.Category})
	}
	if filter.SellingPrice != nil {
		sqrlBuilder.Where(sqrl.Eq{"selling_price": filter.SellingPrice})
	}
	if filter.Quantity != nil {
		sqrlBuilder.Where(sqrl.Eq{"quantity": filter.Quantity})
	}
	if filter.Description != nil {
		sqrlBuilder.Where(sqrl.Eq{"description": filter.Description})
	}
	if filter.ImagePrefix != nil {
		sqrlBuilder.Where(sqrl.Eq{"image_prefix": filter.ImagePrefix})
	}
	if filter.ImageBase64 != nil {
		sqrlBuilder.Where(sqrl.Eq{"image_base64": filter.ImageBase64})
	}

	return true
}

// Exists returns true when the Product exists in the database.
func (p *Product) Exists() bool {
	return p._exists
}

// Deleted returns true when the Product has been marked for deletion from
// the database.
func (p *Product) Deleted() bool {
	return p._deleted
}

// Insert inserts the Product to the database.
func (p *Product) Insert(ctx context.Context, db DB) error {
	switch {
	case p._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case p._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	p.UpdatedAt = time.Now()
	p.CreatedAt = time.Now()
	p.Active = true
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO product (` +
		`name, product_key, updated_at, created_at, active, price, category, selling_price, quantity, description, image_prefix, image_base64` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`
	// run
	logf(sqlstr, p.Name, p.ProductKey, p.UpdatedAt, p.CreatedAt, p.Active, p.Price, p.Category, p.SellingPrice, p.Quantity, p.Description, p.ImagePrefix, p.ImageBase64)
	res, err := db.ExecContext(ctx, sqlstr, p.Name, p.ProductKey, p.UpdatedAt, p.CreatedAt, p.Active, p.Price, p.Category, p.SellingPrice, p.Quantity, p.Description, p.ImagePrefix, p.ImageBase64)
	if err != nil {
		return logerror(err)
	}
	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return logerror(err)
	} // set primary key
	p.ID = int(id)
	// set exists
	p._exists = true
	return nil
}

// Update updates a Product in the database.
func (p *Product) Update(ctx context.Context, db DB) error {
	switch {
	case !p._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case p._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	p.UpdatedAt = time.Now()
	// update with primary key
	const sqlstr = `UPDATE product SET ` +
		`name = ?, product_key = ?, updated_at = ?, created_at = ?, active = ?, price = ?, category = ?, selling_price = ?, quantity = ?, description = ?, image_prefix = ?, image_base64 = ? ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, p.Name, p.ProductKey, p.UpdatedAt, p.CreatedAt, p.Active, p.Price, p.Category, p.SellingPrice, p.Quantity, p.Description, p.ImagePrefix, p.ImageBase64, p.ID)
	if _, err := db.ExecContext(ctx, sqlstr, p.Name, p.ProductKey, p.UpdatedAt, p.CreatedAt, p.Active, p.Price, p.Category, p.SellingPrice, p.Quantity, p.Description, p.ImagePrefix, p.ImageBase64, p.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the Product to the database.
func (p *Product) Save(ctx context.Context, db DB) error {
	if p.Exists() {
		return p.Update(ctx, db)
	}
	return p.Insert(ctx, db)
}

// Upsert performs an upsert for Product.
func (p *Product) Upsert(ctx context.Context, db DB) error {
	switch {
	case p._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO product (` +
		`id, name, product_key, updated_at, created_at, active, price, category, selling_price, quantity, description, image_prefix, image_base64` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)` +
		` ON DUPLICATE KEY UPDATE ` +
		`name = VALUES(name), product_key = VALUES(product_key), updated_at = VALUES(updated_at), created_at = VALUES(created_at), active = VALUES(active), price = VALUES(price), category = VALUES(category), selling_price = VALUES(selling_price), quantity = VALUES(quantity), description = VALUES(description), image_prefix = VALUES(image_prefix), image_base64 = VALUES(image_base64)`
	// run
	logf(sqlstr, p.ID, p.Name, p.ProductKey, p.UpdatedAt, p.CreatedAt, p.Active, p.Price, p.Category, p.SellingPrice, p.Quantity, p.Description, p.ImagePrefix, p.ImageBase64)
	if _, err := db.ExecContext(ctx, sqlstr, p.ID, p.Name, p.ProductKey, p.UpdatedAt, p.CreatedAt, p.Active, p.Price, p.Category, p.SellingPrice, p.Quantity, p.Description, p.ImagePrefix, p.ImageBase64); err != nil {
		return logerror(err)
	}
	// set exists
	p._exists = true
	return nil
}

// Delete deletes the Product from the database.
func (p *Product) Delete(ctx context.Context, db DB) error {
	switch {
	case !p._exists: // doesn't exist
		return nil
	case p._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `UPDATE product SET active = false, updated_at = ? WHERE id = ?`
	// run
	logf(sqlstr, p.ID)
	if _, err := db.ExecContext(ctx, sqlstr, time.Now(), p.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	p._deleted = true
	return nil
}

// ProductByID retrieves a row from 'product' as a Product.
//
// Generated from index 'product_id_pkey'.
func ProductByID(ctx context.Context, db DB, id int) (*Product, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, name, product_key, updated_at, created_at, active, price, category, selling_price, quantity, description, image_prefix, image_base64 ` +
		`FROM product ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, id)
	p := Product{
		_exists: true,
	}
	qb := sqrl.Expr(sqlstr, id)
	if err := db.QueryRowContext(ctx, &p, qb); err != nil {
		return nil, logerror(err)
	}
	return &p, nil
}

// ProductByProductKey retrieves a row from 'product' as a Product.
//
// Generated from index 'product_key'.
func ProductByProductKey(ctx context.Context, db DB, productKey string) (*Product, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, name, product_key, updated_at, created_at, active, price, category, selling_price, quantity, description, image_prefix, image_base64 ` +
		`FROM product ` +
		`WHERE product_key = ?`
	// run
	logf(sqlstr, productKey)
	p := Product{
		_exists: true,
	}
	qb := sqrl.Expr(sqlstr, productKey)
	if err := db.QueryRowContext(ctx, &p, qb); err != nil {
		return nil, logerror(err)
	}
	return &p, nil
}
